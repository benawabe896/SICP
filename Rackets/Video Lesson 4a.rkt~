(define false #f)
(define user-initial-environment (scheme-report-environment 5))
(define mapcar map)

(define algebra-rules
 '(
   ( ((? op) (?c e1) (?c e2))         (: (op e1 e2))               )
   ( ((? op) (? e1) (?c e2))          ((: op) (: e2) (: e1))       )
   ( (+ 0 (? e))                      (: e)                        )
   ( (* 1 (? e))                      (: e)                        )
   ( (* 0 (? e))                      0                            )
   ( (* (?c e1) (* (?c e2) (? e3)))   (* (: (* e1 e2)) (: e3))     )
   ( (* (? e1) (* (?c e2) (? e3)))    (* (: e2) (* (: e1) (: e3))) )
   ( (* (* (? e1) (? e2)) (? e3))     (* (: e1) (* (: e2) (: e3))) )
   ( (+ (?c e1) (+ (?c e2) (? e3)))   (+ (: (+ e1 e2)) (: e3))     )
   ( (+ (? e1) (+ (?c e2) (? e3)))    (+ (: e2) (+ (: e1) (: e3))) )
   ( (+ (+ (? e1) (? e2)) (? e3))     (+ (: e1) (+ (: e2) (: e3))) )
   ( (+ (* (?c c) (? a)) (* (?c d) (? a)))
                                      (* (: (+ c d)) (: a))        )
   ( (* (? c) (+ (? d) (? e)))        (+ (* (: c) (: d))
                                         (* (: c) (: e)))          )
    ))

(define (match pattern expression dictionary)
  (cond ((eq? dictionary 'failed) 'failed)
        ((atom? pattern)
         (if (atom? expression)
             (if (eq? pattern expression)
                 dictionary
                 'failed)
             'failed))
        ((arbitrary-constant? pattern)
         (if (constant? expression)
             (extend-dictionary pattern expression dictionary)
             'failed))
        ((arbitrary-variable? pattern)
         (if (variable? expression)
             (extend-dictionary pattern expression dictionary)
             'failed))
        ((arbitrary-expression? pattern)
         (extend-dictionary pattern expression dictionary))
        ((atom? expression) 'failed)
        (else
         (match (cdr pattern)
                (cdr expression)
                (match (car pattern)
                       (car expression)
                       dictionary)))))

(define (instantiate skeleton dictionary)
  (cond ((atom? skeleton) skeleton)
        ((skeleton-evaluation? skeleton)
         (evaluate (evaluation-expression skeleton)
                   dictionary))
        (else (cons (instantiate (car skeleton) dictionary)
                    (instantiate (cdr skeleton) dictionary)))))

(define (simplifier the-rules)
  (define (simplify-exp exp)
    (try-rules (if (compound? exp)
                   (simplify-parts exp)
                   exp)))
  (define (simplify-parts exp)
    (if (null? exp)
        '()
        (cons (simplify-exp (car exp))
              (simplify-parts (cdr exp)))))
  (define (try-rules exp)
    (define (scan rules)
      (if (null? rules)
          exp
          (let ((dictionary (match (pattern (car rules))
                                   exp
                                   (make-empty-dictionary))))
            (if (eq? dictionary 'failed)
                (scan (cdr rules))
                (simplify-exp (instantiate (skeleton (car rules))
                                           dictionary))))))
    (scan the-rules))
  simplify-exp)

(define (make-empty-dictionary) '())

(define (extend-dictionary pat dat dictionary)
  (let ((vname (variable-name pat)))
    (let ((v (assq vname dictionary)))
      (cond ((not v)
             (cons (list vname dat) dictionary))
            ((eq? (cadr v) dat) dictionary)
            (else 'failed)))))

(define (lookup var dictionary)
  (let ((v (assq var dictionary)))
    (if (null? v)
        var
        (cadr v))))

(define (compound? exp) (pair? exp))
(define (constant? exp) (number? exp))
(define (variable? exp) (atom? exp))
(define (pattern rule) (car rule))
(define (skeleton rule) (cadr rule))

(define (arbitrary-constant? pat)
  (if (pair? pat) (eq? (car pat) '?c) false))

(define (arbitrary-expression? pat)
  (if (pair? pat) (eq? (car pat) '?) false))

(define (arbitrary-variable? pat)
  (if (pair? pat) (eq? (car pat) '?v) false))

(define (variable-name pat) (cadr pat))

(define (skeleton-evaluation? pat)
  (if (pair? pat) (eq? (car pat) ':) false))

(define (evaluation-expression evaluation) (cadr evaluation))

(define (evaluate form dictionary)
  (if (atom? form)
      (lookup form dictionary)
      (apply (eval (lookup (car form) dictionary)
                   user-initial-environment)
             (map (lambda (v) (lookup v dictionary))
                     (cdr form)))))

(define algsimp (simplifier algebra-rules))

(define deriv-rules
 '(( (dd (?c c) (? v))              0                                )
   ( (dd (?v v) (? v))              1                                )
   ( (dd (?v u) (? v))              0                                )
   ( (dd (+ (? x1) (? x2)) (? v))   (+ (dd (: x1) (: v))
                                       (dd (: x2) (: v)))            )
   ( (dd (* (? x1) (? x2)) (? v))   (+ (* (: x1) (dd (: x2) (: v)))
                                       (* (dd (: x1) (: v)) (: x2))) )
   ( (dd (** (? x) (?c n)) (? v))   (* (* (: n)
                                          (** (: x) (: (- n 1))))
                                       (dd (: x) (: v)))             )
    ))

(define dsimp (simplifier deriv-rules))

(define scheme-rules
 '(( (square (?c n))               (: (* n n))                      )
   ( (fact 0)                      1                                )
   ( (fact (?c n))                 (* (: n) (fact (: (- n 1))))     )
   ( (fib 0)                       0                                )
   ( (fib 1)                       1                                )
   ( (fib (?c n))                  (+ (fib (: (- n 1)))
                                      (fib (: (- n 2))))            )
   ( ((? op) (?c e1) (?c e2))      (: (op e1 e2))                   ) ))

(define scheme-evaluator (simplifier scheme-rules))

(define (atom? x) (not (pair? x)))

(dsimp '(dd (+ x y) x))
